---
AWSTemplateFormatVersion: 2010-09-09
Description: Calligre EC2 CF Stack
Parameters:
  RdsAdminUser:
    Default: calligreadmin
    Description: The RDS admin account user name
    Type: String
  RdsAdminPassword:
    NoEcho: true
    Description: The RDS admin account password
    Type: String
  RdsDbName:
    Default: calligre
    Description: Database name to use
    Type: String
  RdsUser:
    Default: calligre
    Description: An unpriviledged user account for normal operations
    Type: String
  RdsPassword:
    NoEcho: true
    Description: An unpriviledged user account for normal operations
    Type: String
  Auth0ClientId:
    Description: Auth0 Client ID
    Type: String
  Auth0SecretId:
    Description: Auth0 Secret Id
    Type: String
  SentryDsn:
    Description: Sentry DSN
    Type: String
  Domain:
    Description: Domain that the server should respond to
    Type: String
  Keypair:
    Default: calligre
    Description: EC2 Keypair to associate with the Instance
    Type: String
  InstanceType:
    Default: r4.large
    Description: Instance type to host the conference on
    Type: String
Resources:
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          sources:
            /home/ec2-user/calligre-ansible-role: https://github.com/kyl191/calligre-ansible-role/zipball/master
          files:
            /home/ec2-user/calligre.yml:
              content: |
                - hosts: localhost
                  become: true
                  roles:
                    - role: calligre-ansible-role
              mode: "000644"
              owner: ec2-user
              group: ec2-user
              encoding: plain
            /home/ec2-user/calligre-ansible-role/vars/main.yml:
              content: !Sub |
                db_host: ${RdsInstance.Endpoint.Address}
                db_port: ${RdsInstance.Endpoint.Port}
                db_base: ${RdsDbName}
                db_user: ${RdsUser}
                db_password: ${RdsPassword}
                db_admin_user: ${RdsAdminUser}
                db_admin_password: ${RdsAdminPassword}
                auth0_client_id: ${Auth0ClientId}
                auth0_secret_id: ${Auth0SecretId}
                sentry_dsn: ${SentryDsn}
                calligre_domain: ${Domain}
                aws_region: ${AWS::Region}
              mode: "000644"
              owner: ec2-user
              group: ec2-user
              encoding: plain
          commands:
            1-install-ansible:
              command: pip -q install ansible
            2-run-ansible:
              command:  /usr/local/bin/ansible-playbook -i "localhost," -c local calligre.yml
              cwd: /home/ec2-user
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: ami-ebed508f
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: Ec2InstanceProfile
      KeyName:
        Ref: Keypair
      Monitoring: false
      NetworkInterfaces:
      - DeleteOnTermination: true
        Description: Primary network interface
        DeviceIndex: 0
        SubnetId:
          Ref: AzASubnet
        GroupSet:
        - Ref: CalligreSecurityGroup
      Tags:
      - Key: Name
        Value: calligre
  Ec2IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  CalligreIamPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "s3:*"
            Resource: "*"
          - Effect: "Allow"
            Action: "sns:*"
            Resource: "*"
          - Effect: "Allow"
            Action: "dynamodb:*"
            Resource: "*"
      PolicyName: Calligre-Instance-Policy
      Roles:
        - Ref: Ec2IamRole
  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: Ec2IamRole
  RdsInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBInstanceClass: db.t2.micro
      Port: 5432
      PubliclyAccessible: false
      StorageType: gp2
      BackupRetentionPeriod: 21
      MasterUsername:
        Ref: RdsAdminUser
      MasterUserPassword:
        Ref: RdsAdminPassword
      PreferredBackupWindow: 04:00-04:30
      PreferredMaintenanceWindow: sat:05:00-sat:05:30
      DBName: calligre
      Engine: postgres
      EngineVersion: 9.5.4
      LicenseModel: postgresql-license
      DBSubnetGroupName:
        Ref: DbSubnetGroup
      VPCSecurityGroups:
      - Ref: CalligreDbSecurityGroup
      Tags:
      - Key: Name
        Value: calligre
  CalligreVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.42.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: calligre
  ElasticIp:
    Type: AWS::EC2::EIP
    DependsOn:
    - VpcGateway
    Properties:
      Domain: vpc
  ElasticIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ElasticIp
        - AllocationId
      InstanceId:
        Ref: Instance
  AzASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.42.0.0/24
      AvailabilityZone: ca-central-1a
      VpcId:
        Ref: CalligreVpc
  AzBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.42.1.0/24
      AvailabilityZone: ca-central-1b
      VpcId:
        Ref: CalligreVpc
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Security Group for RDS Instances
      SubnetIds:
      - Ref: AzASubnet
      - Ref: AzBSubnet
  CalligreSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Primary Security Group for Instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: CalligreVpc
  CalligreDbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS DB Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId:
            Ref: CalligreSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          DestinationSecurityGroupId:
            Ref: CalligreSecurityGroup
      VpcId:
        Ref: CalligreVpc
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: CalligreVpc
  AllowVpcOutgoingAclRuleRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId:
        Ref: NetworkAcl
  AllowVpcIncomingAcl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId:
        Ref: NetworkAcl
  AzASubnetAcl:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      SubnetId:
        Ref: AzASubnet
  AzBSubnetAcl:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      SubnetId:
        Ref: AzBSubnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: CalligreVpc
  AzASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AzASubnet
      RouteTableId:
        Ref: RouteTable
  AzBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: AzBSubnet
      RouteTableId:
        Ref: RouteTable
  VpcGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: CalligreVpc
      InternetGatewayId:
        Ref: InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: RouteTable
      GatewayId:
        Ref: InternetGateway
    DependsOn: VpcGateway
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainNameServers:
      - AmazonProvidedDNS
  DhcpOptAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: CalligreVpc
      DhcpOptionsId:
        Ref: DhcpOptions
